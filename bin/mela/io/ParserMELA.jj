options {
  STATIC = false;
}

PARSER_BEGIN(MELAparser)

package mela.io;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import mela.io.AllActionInfo;
import mela.model.AgentManager;
import mela.model.AgentStep;
import mela.model.LocationManager;
import mela.model.Model;
import mela.model.MovementUpdate;
import mela.model.NoInfluenceRule;
import mela.model.DeterministicUpdate;
import mela.model.EnvironmentRule;
import mela.model.InfluenceRule;
import mela.model.Update;
import mela.model.Agent;

public class MELAparser {
       
    public MELAparser() {
        this(new java.io.StringReader(""));
    }

    public Model parseFromString( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        this.ReInit(new java.io.StringReader(modelDef));
        return Input();
    }

        public Model parseFromFile( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        return Input();
    }

}

PARSER_END(MELAparser)

/***************************************************************
SKIP
***************************************************************/

<DEFAULT,RESET,ID> SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"

  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
TOKENS
***************************************************************/

 /* LITERALS */
TOKEN : { < #INTEGER: ("-")? ["0"-"9"] (["0"-"9"])* > }
TOKEN : { < #FLOAT:
                            ("-")?  (["0"-"9"])+ "." (["0"-"9"])*
                            | ("-")?  "." (["0"-"9"])+
                    > }
TOKEN : { < #FLOAT_SCIENTIFIC:
                             ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)
                            |  ("-")? "." (["0"-"9"])+ (<EXPONENT>)
                            |  ("-")? (["0"-"9"])+ <EXPONENT>
                    > }
TOKEN : { < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > }              
TOKEN: { < #LETTER: ["A"-"Z","a"-"z"] > }
TOKEN: { < #DIGIT: ["0"-"9"] > }

TOKEN: { < #WORD: (["A"-"Z","a"-"z"])+ > }

	
/*
IDENTIFIERS
*/

<DEFAULT> TOKEN : { <SECTION_SPACE : "#Space" > }
<DEFAULT> TOKEN : { <SECTION_PARAM : "#Parameters" > }
<DEFAULT> TOKEN : { <SECTION_AGENTS : "#Agents" > }
<DEFAULT> TOKEN : { <SECTION_ENV : "#Environment" > }
<DEFAULT> TOKEN : { <SECTION_INIT : "#Initial conditions" > }

<DEFAULT> TOKEN : { <VERTICES : "L" > }
<DEFAULT> TOKEN : { <EDGES : "E" > }

<DEFAULT> TOKEN : { <KEYWORD_GRAPH : "Graph" > }
<DEFAULT> TOKEN : { <KEYWORD_ONED : "OneD" > }
<DEFAULT> TOKEN : { <KEYWORD_TWOD : "TwoD" > }
<DEFAULT> TOKEN : { <KEYWORD_THREED : "ThreeD" > }

<DEFAULT> TOKEN : { <KEYWORD_BOUNDARY : "#Boundary" > }
<DEFAULT> TOKEN : { <KEYWORD_PERIODIC : "periodic" > }
<DEFAULT> TOKEN : { <KEYWORD_BOUNCING : "bouncing" > }

<DEFAULT> TOKEN : { <KEYWORD_LOC : "l" > }
<DEFAULT> TOKEN : { <KEYWORD_NEIGH : "N" > }
<DEFAULT> TOKEN : { <KEYWORD_ALL : "all" > }

<DEFAULT> TOKEN : { <KEYWORD_MOVE : "new(l)" > }

<DEFAULT> TOKEN : { <EOL : ";" > }
<DEFAULT> TOKEN : { <PLUS : "+" > }
<DEFAULT> TOKEN : { <DOT : "." > }
<DEFAULT> TOKEN : { <SEMICOLON : ":" > }
<DEFAULT> TOKEN : { <DEFINE : ":=" > }

<DEFAULT> TOKEN : { <ASSIGN : "=" >}
<DEFAULT> TOKEN : { <LSQ : "[" >}
<DEFAULT> TOKEN : { <RSQ : "]" >}
<DEFAULT> TOKEN : { <LR : "(" > }
<DEFAULT> TOKEN : { <RR : ")" > }
<DEFAULT> TOKEN : { <QUO : "\"" > }
<DEFAULT> TOKEN : { <SQUO : "\'" > }
<DEFAULT> TOKEN : { <EXCL : "!" > }
<DEFAULT> TOKEN : { <LBRAC : "{" > }
<DEFAULT> TOKEN : { <RBRAC : "}" > }

<DEFAULT> TOKEN : { <COMMA : "," >}
<DEFAULT> TOKEN : { <LANG : "<" > }
<DEFAULT> TOKEN : { <RANG : ">" > }
<DEFAULT> TOKEN : { <PARALLEL : "||" > }

<DEFAULT> TOKEN : { <TRIANGLE : "|>" > }

<DEFAULT> TOKEN : { <DASH : "-" > }

<DEFAULT> TOKEN : { <UP : ">>" > }
<DEFAULT> TOKEN : { <DOWN : "<<" > }

/*<DEFAULT> TOKEN: { <MELASYMBOL: < DOT > > }*/

<DEFAULT> TOKEN : {<INT : <INTEGER> > }
<DEFAULT> TOKEN : {<DOUBLE : <FLOAT>|<FLOAT_SCIENTIFIC> > }
<DEFAULT> TOKEN: { <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|"_"|"$"|"#")*> }

/*<DEFAULT> TOKEN: { <UPDATE_LOC: <WORD>> } */

<MATH> TOKEN : { <MATH_EXPR : (<DIGIT> | <SYMBOL> | <SPACE> | <M_AND> | <M_OR> | <M_LINER> | <M_LINEN> | <SQUO>)+ > : DEFAULT }
<MATH> TOKEN : { <#SPACE : " " | "\t"> }
<MATH> TOKEN : { <#M_AND : "&&" > }
<MATH> TOKEN : { <#M_OR : "|"> }
<MATH> TOKEN : { <#M_LINER : "\r"> }
<MATH> TOKEN : { <#M_LINEN : "\n"> }


TOKEN : { <#SYMBOL : [".", "=", "+", "-", "*", "/", "%", "^", "(", ")", "!", "<", ">", ",", "_", "[","]" ]> }
TOKEN : { <#PARAM_SYMBOL : [".", "+", "-", "*", "/", "%", "^" ]> }


/***********************************************
GRAMMAR RULES
***********************************************/

/*********
MODEL STRUCTURE
*********/

Model Input() throws NumberFormatException, RuntimeException, ParseException :
{
    Model m = new Model();    
    LocationManager lm;
    AgentManager am = new AgentManager();
    HashMap<String,Double> parameters = new HashMap<String,Double>();
    HashMap<String,AllActionInfo> allActionInfo = new HashMap<String,AllActionInfo>();
}
{   <SECTION_SPACE>
	<SEMICOLON>
   	lm = SpaceStructure()
   	{ m.setLocationManager(lm); }
    <SECTION_PARAM>
    (
      Param( parameters )
    )*
    <SECTION_AGENTS>
    { m.setAgentManager(am); }   
    (
	  Agent(allActionInfo, am, lm)     
    )*
    (<SECTION_ENV>  
	  EnvAgent(allActionInfo, am, lm)     
    )?
    <SECTION_INIT>
    {
     HashMap<Integer,HashMap<Integer,Integer>> alllocationMap = Init(m);
     m.setAgentLocationFunction( alllocationMap );  
     }
    {//building the rules
    //get the type, build the rule dependent on that
    for (String nameAction : allActionInfo.keySet()) {
        String type = allActionInfo.get(nameAction).getType();
    if (type == "no-inf") {
      NoInfluenceRule.createAddNoInfRule(allActionInfo, nameAction, am, parameters);     
    }else if (type == "inf") {
      InfluenceRule.createAddInfRule(allActionInfo, nameAction, am, parameters);     
    }else if (type == "env") {
      EnvironmentRule.createAddEnvRule(allActionInfo, nameAction, am, parameters);
    }}
     return m; }
     <EOF>
}

/*********
SPACE
*********/

LocationManager SpaceStructure() throws NumberFormatException, RuntimeException, ParseException :
{Token spaceKey=null; 
 LocationManager lm = new LocationManager();}
{   
    [   
        LOOKAHEAD(2)
        spaceKey = < KEYWORD_GRAPH >
        lm=setGraph() { return lm; }
        |
        LOOKAHEAD(2)
        spaceKey = < KEYWORD_ONED >
        lm=setOneD() { return lm; }
        |
        LOOKAHEAD(2)
        spaceKey = < KEYWORD_TWOD >
        lm = setTwoD() { return lm; }
        |
        LOOKAHEAD(2)
        spaceKey = < KEYWORD_THREED >
        lm = setThreeD() { return lm; }
    ]
    {
      return lm;
    }   
}


LocationManager setGraph() throws NumberFormatException, RuntimeException, ParseException :
{
  Token v, v1, e, e1;
  LocationManager lm = new LocationManager();
}
{   < VERTICES >
    < ASSIGN >
    < LBRAC >
    v = <INT>
    { int vValue = Integer.parseInt(v.image);
      String name = lm.createLocationName(vValue);
      lm.createLocation(name); }
    (
       <COMMA>
       v1 = <INT>
    { int v1Value = Integer.parseInt(v1.image);
      String name1 = lm.createLocationName(v1Value);
      lm.createLocation(name1); }
    )*
    < RBRAC >
    < EDGES >
    <ASSIGN>
    <LBRAC>
     <LBRAC>
     e = <INT>
     {if (!(lm.locationInLocationManager("["+e+"]"))){
    	 throw new Error("Location " +  e+"" + " is not defined.");
     }}
     <COMMA>
     e1 = <INT>
     {if (!(lm.locationInLocationManager("["+e1+"]"))){
    	 throw new Error("Location " +  e1+"" + " is not defined.");
     }}
     <RBRAC>
     { lm.addEdge(lm.getLocation("["+e+"]"), lm.getLocation("["+e1+"]")); }
     ( 
       <COMMA>
       <LBRAC>
       e = <INT>
       {if (!(lm.locationInLocationManager("["+e+"]"))){
    	 throw new Error("Location " +  e+"" + " is not defined.");
     }}
       <COMMA>
       e1 = <INT>
      {if (!(lm.locationInLocationManager("["+e1+"]"))){
    	 throw new Error("Location " +  e1+"" + " is not defined.");
     }}
       <RBRAC>
    { lm.addEdge(lm.getLocation("["+e+"]"), lm.getLocation("["+e1+"]")); }     
       )*
     <RBRAC>
     {  return lm; }
}

LocationManager setOneD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x;
    Boolean boundaryChoice;
}
{   <LR>
    x = <INT>
   <RR>
   <KEYWORD_BOUNDARY >
   < SEMICOLON >
   boundaryChoice = boundary()
   {int xValue = Integer.parseInt(x.image);
    LocationManager lm = new LocationManager();
    return lm.buildGridOne( xValue, boundaryChoice );}
}

Boolean boundary() throws NumberFormatException, RuntimeException, ParseException :
{Token spaceKey=null;}
{   
    [   
        LOOKAHEAD(1)
        spaceKey = < KEYWORD_PERIODIC >
        { return true; }
        |
        LOOKAHEAD(1)
        spaceKey = < KEYWORD_BOUNCING >
        { return false; }
    ] 
}

LocationManager setTwoD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x, y;
    Boolean boundaryChoice;
}
{   <LR>
    x = <INT>
    < COMMA >
    y = < INT >
   <RR>
   <KEYWORD_BOUNDARY >
   < SEMICOLON >
   boundaryChoice = boundary()
    {int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    LocationManager lm = new LocationManager();
    return lm.buildGridTwo( xValue, yValue, boundaryChoice );}
}

LocationManager setThreeD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x, y, z;
    Boolean boundaryChoice;
}
{   <LR>
    x = <INT>
    < COMMA >
    y = < INT >
    < COMMA >
    z = < INT >
   <RR>
   <KEYWORD_BOUNDARY >
   < SEMICOLON >
   boundaryChoice = boundary()
   {int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    int zValue = Integer.parseInt(z.image);
    LocationManager lm = new LocationManager();
    return lm.buildGridThree( xValue, yValue, zValue, boundaryChoice);}
}

/*********
PARAMETERS
*********/

void Param( HashMap<String,Double> parameters ) throws NumberFormatException, RuntimeException, ParseException :
{
    Token t1,t2;    
}
{		
    t1 = <IDENTIFIER>
    <ASSIGN>
    t2 = <DOUBLE> 
    <EOL>
    {double value = Double.parseDouble(t2.image);
    String name = t1.image;
     if (parameters.containsKey(name)){
    	 throw new Error("Parameter " +  name + " already defined.");
     }else{
     parameters.put( name, value ); } }
}

/*********
AGENTS
*********/

void Agent(HashMap<String,AllActionInfo> allActionInfo,  AgentManager am, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{
    Token t;
    Agent agent;
}
{
    t = <IDENTIFIER>
    (<LR>
    <KEYWORD_LOC>
    <RR>
     )?
     {agent = am.addAgent(t.image);}
    <DEFINE>
    actionToStore(agent, allActionInfo, am, lm)
   // {System.out.println(allActionInfo); }
    (
        <PLUS> 
        actionToStore(agent, allActionInfo, am, lm)
   //     {System.out.println(allActionInfo); }
    )*
    <EOL>
}

void actionToStore(Agent agent, HashMap<String,AllActionInfo> allActionInfo,  AgentManager am, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{}
{   
    [   
        LOOKAHEAD(2)
        StoreNoInfAction(agent, allActionInfo, am, lm)
        |
        LOOKAHEAD(2)
        StoreInfAction(agent, allActionInfo, am, lm)
        |
        LOOKAHEAD(2)
        StorePassAction(agent, allActionInfo, am, lm)
    ]
}


void StoreNoInfAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{
ArrayList<String > updateArray = new ArrayList<String >();
Token name = null, rateNameToken = null, symbol=null, update=null, updateloc=null, update2=null, updateloc2=null; 
}
{
    <LR>
    name = <IDENTIFIER>
    {AllActionInfo newNoInf = new AllActionInfo();
     String nameAction = name.image; 
     newNoInf.setAgentPerformingActive(agent.getName());
    }
    <COMMA>
    rateNameToken = <IDENTIFIER>
    {String rateName = rateNameToken.image; 
     newNoInf.setType("no-inf");
     newNoInf.setRateName(rateName); }
    <RR>
    symbol = MelaSymbol()
    {newNoInf.setSymbolActive(symbol.image); }    
    update = <IDENTIFIER>
    <LR>
    updateloc = UpdateLoc()
     <RR>
    ( <PARALLEL>
      update2 = <IDENTIFIER>
      <LR>
      updateloc2 = UpdateLoc()
      <RR>
      { updateArray.add(update2.image); } 
      )?
   {if (symbol.image == "|>") {    
    allActionInfo.put(name.image, newNoInf);}
    else if (symbol.image == ">>"){
    updateArray.add(update.image);
    updateArray.add(update.image);
    newNoInf.setUpdateArrayActive(updateArray);   
    allActionInfo.put(name.image, newNoInf);}
    else if (symbol.image == "<<"){
    newNoInf.setUpdateArrayActive(updateArray);
    allActionInfo.put(name.image, newNoInf);}
    else if (symbol.image == ".") {
    updateArray.add(update.image);
    newNoInf.setUpdateArrayActive(updateArray);
    allActionInfo.put(name.image, newNoInf);
    }  
}
}

Token MelaSymbol() throws NumberFormatException, RuntimeException, ParseException :
{Token symbol = null;}
{   
    [   
        LOOKAHEAD(1)
        symbol = < DOT >
        |
        LOOKAHEAD(1)
        symbol = <  UP >
        |
        LOOKAHEAD(1)
        symbol = <  DOWN >
        |
        LOOKAHEAD(1)
        symbol = <  TRIANGLE >
    ]
    {
      return symbol;
    }   
}

Token UpdateLoc() throws NumberFormatException, RuntimeException, ParseException :
{Token update=null;}
{   
    [   
        LOOKAHEAD(1)
        update = < KEYWORD_LOC >
        |
        LOOKAHEAD(1)
        update = <  KEYWORD_MOVE >
    ]
    { 
    return update;
    }   
}

void StoreInfAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{
ArrayList<String> updateArray = new ArrayList<String>();
Token rangeNeigh=null, name = null, rateNameToken = null, symbol=null, update=null, updateloc=null, update2=null, updateloc2=null; 
String infset;
int rangeNeighValue = 0;
}
{
    <DASH>
    <RANG>
    < LBRAC >
    infset =  InfSet(allActionInfo)
    (<LR>
    rangeNeigh = < INT >
    <RR>
    {rangeNeighValue = Integer.parseInt(rangeNeigh.image);
     infset = "neigh";})? 
    < RBRAC >
    <LR>    
    name = <IDENTIFIER>
    {String nameAction = name.image;
    if (!allActionInfo.containsKey(nameAction)) {
    AllActionInfo newInf = new AllActionInfo();
    allActionInfo.put(nameAction, newInf);
    }
    allActionInfo.get(nameAction).setAgentPerformingActive(agent.getName());
    if (infset=="local") {
    allActionInfo.get(nameAction).setInfSetLocal();
    }else if (infset=="neigh") {
    allActionInfo.get(nameAction).setInfSetNeigh(rangeNeighValue);
    } else if(infset == "all") {
    allActionInfo.get(nameAction).setInfSetAll();
    }    
    }
    <COMMA>
    rateNameToken = <IDENTIFIER>
    {String rateName = rateNameToken.image; 
     allActionInfo.get(nameAction).setType("inf");
     allActionInfo.get(nameAction).setRateName(rateName); }
    <RR>
    symbol = MelaSymbol()
    {allActionInfo.get(nameAction).setSymbolActive(symbol.image); }    
    update = <IDENTIFIER>
    <LR>
    updateloc = UpdateLoc()
     <RR>
    ( <PARALLEL>
      update2 = <IDENTIFIER>
      <LR>
      updateloc2 = UpdateLoc()
      <RR>
      { updateArray.add(update2.image); } 
      )?
   {if (symbol.image == "|>") {}
    else if (symbol.image == ">>"){
    updateArray.add(update.image);
    updateArray.add(update.image);
    allActionInfo.get(nameAction).setUpdateArrayActive(updateArray);}
    else if (symbol.image == "<<"){
    allActionInfo.get(nameAction).setUpdateArrayActive(updateArray);}
    else if (symbol.image == ".") {
    updateArray.add(update.image);
    allActionInfo.get(nameAction).setUpdateArrayActive(updateArray);
    } 
   }
}

String InfSet(HashMap<String, AllActionInfo> allActionInfo) throws NumberFormatException, RuntimeException, ParseException :
{ Token toRead = null;
   String set = "";}
{   
    [   
        LOOKAHEAD(1)
        toRead = < KEYWORD_LOC >
        {set = "local";}
        |
        LOOKAHEAD(1)
        toRead = <  KEYWORD_NEIGH >
        |
        LOOKAHEAD(1)
        toRead = <  KEYWORD_ALL >
        {set = "all";}
    ]
    {
      return set;
    }   
}

void StorePassAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{
ArrayList<String> updateArray = new ArrayList<String>();
Token name = null, probNameToken = null, symbolPass=null, updatePass=null, updatelocPass=null, updatePass2=null, updatelocPass2=null; 
}
{
    <LANG>
    <DASH>
    <LR>
    name = <IDENTIFIER>
    {String nameAction = name.image;
     if (!allActionInfo.containsKey(nameAction)) {
     AllActionInfo newInf = new AllActionInfo();
     allActionInfo.put(nameAction, newInf);
    }
     allActionInfo.get(nameAction).setAgentPerformingPassive(agent.getName());
    }
    <COMMA>
    probNameToken = <IDENTIFIER>
    {String probName = probNameToken.image; 
    allActionInfo.get(nameAction).setProbName(probName); }
    <RR>
    symbolPass = MelaSymbol()
    {allActionInfo.get(nameAction).setSymbolPassive(symbolPass.image); }  
    updatePass = <IDENTIFIER>
    <LR>
    updatelocPass = UpdateLoc()
    <RR>
    ( <PARALLEL>
      updatePass2 = <IDENTIFIER>
      <LR>
      updatelocPass2 = UpdateLoc()
      <RR>
      { updateArray.add(updatePass2.image); } 
      )?
   {if (symbolPass.image == "|>") {}
    else if (symbolPass.image == ">>"){
    updateArray.add(updatePass.image);
    updateArray.add(updatePass.image);
    allActionInfo.get(nameAction).setUpdateArrayPassive(updateArray);}
    else if (symbolPass.image == "<<"){
    allActionInfo.get(nameAction).setUpdateArrayPassive(updateArray);}
    else if (symbolPass.image == ".") {
    updateArray.add(updatePass.image);
    allActionInfo.get(nameAction).setUpdateArrayPassive(updateArray);
    } 
   }
 
}


void EnvAgent(HashMap<String,AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{
    Token t;
    Agent agent;
}
{
    t = <IDENTIFIER>
    <DEFINE>
    {agent = am.addAgent(t.image);}
    StoreEnvAction(agent, allActionInfo, am, lm) 
    (
        <PLUS> 
        StoreEnvAction(agent, allActionInfo, am, lm) 
    )* 
    <EOL>
}

void StoreEnvAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{
ArrayList<Integer > updateArray = new ArrayList<Integer >();
Token rangeNeigh=null, name = null, rateNameToken = null, symbol=null, update=null, updateloc=null, update2=null, updateloc2=null; 
Predicate<Integer> envset;
}
{
    <DASH>
    <RANG>
    < LBRAC >
    envset =  envSet(allActionInfo, lm)
    < RBRAC >
    <LR>    
    name = <IDENTIFIER>
    {String nameAction = name.image; 
     if (!allActionInfo.containsKey(nameAction)) {
     AllActionInfo newEnv = new AllActionInfo();
     allActionInfo.put(nameAction, newEnv);
    }
     allActionInfo.get(nameAction).setAgentPerformingActive(agent.getName());  
     allActionInfo.get(nameAction).setEnvPredicate(envset);   
    }
    <COMMA>
    rateNameToken = <IDENTIFIER>
    {String rateName = rateNameToken.image; 
     allActionInfo.get(nameAction).setType("env");
     allActionInfo.get(nameAction).setRateName(rateName); }
    <RR>
    symbol = MelaSymbol()    
    update = <IDENTIFIER>
    // no update for the environment (add a method to check that the same name is declared) 
   
}

Predicate<Integer> envSet (HashMap<String, AllActionInfo> allActionInfo, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{ Token toRead = null;
  String set = "";
  Predicate<Integer> envPred  = null; }
{   
    [   
        LOOKAHEAD(1)
        toRead = < KEYWORD_ALL >
        {envPred = EnvironmentRule.allPredicate();}
        |
        LOOKAHEAD(1)
        toRead = < LR >
        {envPred = loc(allActionInfo, lm); }
    ]
    {
      return envPred;
    }   
}

Predicate<Integer> loc (HashMap<String, AllActionInfo> allActionInfo, LocationManager lm) throws NumberFormatException, RuntimeException, ParseException :
{ Predicate<Integer> envPred  = null;
  ArrayList<Integer> listIndex = new ArrayList<Integer>();
  String locationName;
  String locationName2;}
{   
    [
        //necessary (), not ideal for graph and OneD - solve it!
        locationName = locName()
        {int ind = lm.getIndexFromName(locationName);
        listIndex.add(ind);}
        <RR>
        (< COMMA >
          < LR >
          locationName2 = locName()
          {int ind2 = lm.getIndexFromName(locationName2);
          listIndex.add(ind2); }
          <RR>
        )?
    ]
    {
      envPred = EnvironmentRule.createPredicate(listIndex);
      return envPred;
    }   
}


String locName () throws NumberFormatException, RuntimeException, ParseException :
{ Token x, y, z = null;
  String locationName = "[";}
{
[
    x = < INT >
    { locationName += x; }
    (
      <COMMA>
      y = <INT>
      { locationName += ", "+y; }
        (
         <COMMA>
         z = <INT>
         { locationName += ", "+z; }
         )?
         )?
    { locationName += "]"; }     
]
{ 
return locationName;
}
}


  



/*********
INITIAL CONDITIONS
*********/


//BiFunction<Integer,Integer,Integer>  Init( Model m ) throws NumberFormatException, RuntimeException, ParseException :
HashMap<Integer,HashMap<Integer,Integer>> Init( Model m ) throws NumberFormatException, RuntimeException, ParseException :

{  
HashMap<Integer,HashMap<Integer,Integer>> allLocationMap = new HashMap<Integer,HashMap<Integer,Integer>>();
}
{  
    InitAgent(m, allLocationMap ) 
    (
        <PARALLEL> 
        InitAgent(m, allLocationMap ) 
    )*
{

  
  return allLocationMap;
}
  
}    


void InitAgent( Model m , HashMap<Integer,HashMap<Integer,Integer>> allocationMap  ) throws NumberFormatException, RuntimeException, ParseException :
{    
   int agentIndex = 0;
   int locationIndex = 0;
   String locationName = "[";
   Token t, x, y, z, n;
}
{
    t = <IDENTIFIER>
     {  if (m.getAgentManager().agentIndex(t.image) != -1){
    	  agentIndex = m.getAgentManager().agentIndex(t.image);
      }else{
    	  throw new Error("Agent  " +  t.image + " does not exist."); 
      }; }
    
    (
    <LR>
    x = <INT> { locationName += x; }
    (
       <COMMA>
    y = <INT> { locationName += ", "+y; }
    (
       <COMMA>
    z = <INT> { locationName += ", "+z; }
    )?
    )?   
    <RR>
    { locationName += "]";
      if (locationName == "[]") {
         //environment agent - choose the index in the matrix: 0?
         locationIndex = 0;
      }
      if (m.getLocationManager().getLocationIndex(locationName) != -1){
    	  locationIndex = m.getLocationManager().getLocationIndex(locationName);
      }else{
    	  throw new Error("Location  " +  locationName + " does not exist."); 
      };
      locationIndex = m.getLocationManager().getLocationIndex(locationName); }
    )?
    <LSQ>
    n = <INT>
    {int nValue = Integer.parseInt(n.image);}
    <RSQ>
    { 
    HashMap<Integer,Integer> internalMap = allocationMap.get( agentIndex );
	if (internalMap==null) {
		internalMap = new HashMap<Integer,Integer>();
		allocationMap.put( agentIndex , internalMap );
	}
	internalMap.put( locationIndex , nValue );
    }
}

