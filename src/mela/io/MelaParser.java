/* Generated By:JavaCC: Do not edit this line. MELAparser.java */
package mela.io;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import mela.io.AllActionInfo;
import mela.model.AgentManager;
import mela.model.AgentStep;
import mela.model.LocationManager;
import mela.model.Model;
import mela.model.MovementUpdate;
import mela.model.NoInfluenceRule;
import mela.model.DeterministicUpdate;
import mela.model.EnvironmentRule;
import mela.model.InfluenceRule;
import mela.model.Update;
import mela.model.Agent;

public class MELAparser implements MELAparserConstants {

    public MELAparser() {
        this(new java.io.StringReader(""));
    }

    public Model parseFromString( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        this.ReInit(new java.io.StringReader(modelDef));
        return Input();
    }

        public Model parseFromFile( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        return Input();
    }

/***********************************************
GRAMMAR RULES
***********************************************/

/*********
MODEL STRUCTURE
*********/
  final public Model Input() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Model m = new Model();
    LocationManager lm;
    AgentManager am = new AgentManager();
    HashMap<String,Double> parameters = new HashMap<String,Double>();
    HashMap<String,AllActionInfo> allActionInfo = new HashMap<String,AllActionInfo>();
    jj_consume_token(SECTION_SPACE);
    jj_consume_token(SEMICOLON);
    lm = SpaceStructure();
          m.setLocationManager(lm);
    jj_consume_token(SECTION_PARAM);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Param(parameters);
    }
    jj_consume_token(SECTION_AGENTS);
      m.setAgentManager(am);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Agent(allActionInfo, am, lm);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SECTION_ENV:
      jj_consume_token(SECTION_ENV);
      EnvAgent(allActionInfo, am, lm);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(SECTION_INIT);
     HashMap<Integer,HashMap<Integer,Integer>> alllocationMap = Init(m);
     m.setAgentLocationFunction( alllocationMap );
     //building the rules
    //get the type, build the rule dependent on that
    for (String nameAction : allActionInfo.keySet()) {
        String type = allActionInfo.get(nameAction).getType();
    if (type == "no-inf") {
      NoInfluenceRule.createAddNoInfRule(allActionInfo, nameAction, am, parameters);
    }else if (type == "inf") {
      InfluenceRule.createAddInfRule(allActionInfo, nameAction, am, parameters);
    }else if (type == "env") {
      EnvironmentRule.createAddEnvRule(allActionInfo, nameAction, am, parameters);
    }}
     {if (true) return m;}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

/*********
SPACE
*********/
  final public LocationManager SpaceStructure() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token spaceKey=null;
 LocationManager lm = new LocationManager();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_GRAPH:
    case KEYWORD_ONED:
    case KEYWORD_TWOD:
    case KEYWORD_THREED:
      if (jj_2_1(2)) {
        spaceKey = jj_consume_token(KEYWORD_GRAPH);
        lm = setGraph();
                        {if (true) return lm;}
      } else if (jj_2_2(2)) {
        spaceKey = jj_consume_token(KEYWORD_ONED);
        lm = setOneD();
                       {if (true) return lm;}
      } else if (jj_2_3(2)) {
        spaceKey = jj_consume_token(KEYWORD_TWOD);
        lm = setTwoD();
                         {if (true) return lm;}
      } else if (jj_2_4(2)) {
        spaceKey = jj_consume_token(KEYWORD_THREED);
        lm = setThreeD();
                           {if (true) return lm;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
      {if (true) return lm;}
    throw new Error("Missing return statement in function");
  }

  final public LocationManager setGraph() throws ParseException, NumberFormatException, RuntimeException, ParseException {
  Token v, v1, e, e1;
  LocationManager lm = new LocationManager();
    jj_consume_token(VERTICES);
    jj_consume_token(ASSIGN);
    jj_consume_token(LBRAC);
    v = jj_consume_token(INT);
      int vValue = Integer.parseInt(v.image);
      String name = lm.createLocationName(vValue);
      lm.createLocation(name);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      v1 = jj_consume_token(INT);
      int v1Value = Integer.parseInt(v1.image);
      String name1 = lm.createLocationName(v1Value);
      lm.createLocation(name1);
    }
    jj_consume_token(RBRAC);
    jj_consume_token(EDGES);
    jj_consume_token(ASSIGN);
    jj_consume_token(LBRAC);
    jj_consume_token(LBRAC);
    e = jj_consume_token(INT);
      if (!(lm.locationInLocationManager("["+e+"]"))){
         {if (true) throw new Error("Location " +  e+"" + " is not defined.");}
     }
    jj_consume_token(COMMA);
    e1 = jj_consume_token(INT);
      if (!(lm.locationInLocationManager("["+e1+"]"))){
         {if (true) throw new Error("Location " +  e1+"" + " is not defined.");}
     }
    jj_consume_token(RBRAC);
       lm.addEdge(lm.getLocation("["+e+"]"), lm.getLocation("["+e1+"]"));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LBRAC);
      e = jj_consume_token(INT);
        if (!(lm.locationInLocationManager("["+e+"]"))){
         {if (true) throw new Error("Location " +  e+"" + " is not defined.");}
     }
      jj_consume_token(COMMA);
      e1 = jj_consume_token(INT);
       if (!(lm.locationInLocationManager("["+e1+"]"))){
         {if (true) throw new Error("Location " +  e1+"" + " is not defined.");}
     }
      jj_consume_token(RBRAC);
      lm.addEdge(lm.getLocation("["+e+"]"), lm.getLocation("["+e1+"]"));
    }
    jj_consume_token(RBRAC);
        {if (true) return lm;}
    throw new Error("Missing return statement in function");
  }

  final public LocationManager setOneD() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token x;
    Boolean boundaryChoice;
    jj_consume_token(LR);
    x = jj_consume_token(INT);
    jj_consume_token(RR);
    jj_consume_token(KEYWORD_BOUNDARY);
    jj_consume_token(SEMICOLON);
    boundaryChoice = boundary();
    int xValue = Integer.parseInt(x.image);
    LocationManager lm = new LocationManager();
    {if (true) return lm.buildGridOne( xValue, boundaryChoice );}
    throw new Error("Missing return statement in function");
  }

  final public Boolean boundary() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token spaceKey=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_PERIODIC:
    case KEYWORD_BOUNCING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_PERIODIC:
        spaceKey = jj_consume_token(KEYWORD_PERIODIC);
          {if (true) return true;}
        break;
      case KEYWORD_BOUNCING:
        spaceKey = jj_consume_token(KEYWORD_BOUNCING);
          {if (true) return false;}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

  final public LocationManager setTwoD() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token x, y;
    Boolean boundaryChoice;
    jj_consume_token(LR);
    x = jj_consume_token(INT);
    jj_consume_token(COMMA);
    y = jj_consume_token(INT);
    jj_consume_token(RR);
    jj_consume_token(KEYWORD_BOUNDARY);
    jj_consume_token(SEMICOLON);
    boundaryChoice = boundary();
     int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    LocationManager lm = new LocationManager();
    {if (true) return lm.buildGridTwo( xValue, yValue, boundaryChoice );}
    throw new Error("Missing return statement in function");
  }

  final public LocationManager setThreeD() throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token x, y, z;
    Boolean boundaryChoice;
    jj_consume_token(LR);
    x = jj_consume_token(INT);
    jj_consume_token(COMMA);
    y = jj_consume_token(INT);
    jj_consume_token(COMMA);
    z = jj_consume_token(INT);
    jj_consume_token(RR);
    jj_consume_token(KEYWORD_BOUNDARY);
    jj_consume_token(SEMICOLON);
    boundaryChoice = boundary();
    int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    int zValue = Integer.parseInt(z.image);
    LocationManager lm = new LocationManager();
    {if (true) return lm.buildGridThree( xValue, yValue, zValue, boundaryChoice);}
    throw new Error("Missing return statement in function");
  }

/*********
PARAMETERS
*********/
  final public void Param(HashMap<String,Double> parameters) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t1,t2;
    t1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    t2 = jj_consume_token(DOUBLE);
    jj_consume_token(EOL);
     double value = Double.parseDouble(t2.image);
    String name = t1.image;
     if (parameters.containsKey(name)){
         {if (true) throw new Error("Parameter " +  name + " already defined.");}
     }else{
     parameters.put( name, value ); }
  }

/*********
AGENTS
*********/
  final public void Agent(HashMap<String,AllActionInfo> allActionInfo,  AgentManager am, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    Agent agent;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      jj_consume_token(KEYWORD_LOC);
      jj_consume_token(RR);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      agent = am.addAgent(t.image);
    jj_consume_token(DEFINE);
    actionToStore(agent, allActionInfo, am, lm);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(PLUS);
      actionToStore(agent, allActionInfo, am, lm);
    }
    jj_consume_token(EOL);
  }

  final public void actionToStore(Agent agent, HashMap<String,AllActionInfo> allActionInfo,  AgentManager am, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
    case LANG:
    case DASH:
      if (jj_2_5(2)) {
        StoreNoInfAction(agent, allActionInfo, am, lm);
      } else if (jj_2_6(2)) {
        StoreInfAction(agent, allActionInfo, am, lm);
      } else if (jj_2_7(2)) {
        StorePassAction(agent, allActionInfo, am, lm);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void StoreNoInfAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
ArrayList<Integer > updateArray = new ArrayList<Integer >();
Token name = null, rateNameToken = null, symbol=null, update=null, updateloc=null, update2=null, updateloc2=null;
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
     AllActionInfo newNoInf = new AllActionInfo();
     String nameAction = name.image;
     newNoInf.setAgentPerformingActive(agent.getName());
    jj_consume_token(COMMA);
    rateNameToken = jj_consume_token(IDENTIFIER);
     String rateName = rateNameToken.image;
     newNoInf.setType("no-inf");
     newNoInf.setRateName(rateName);
    jj_consume_token(RR);
    symbol = MelaSymbol();
    update = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    updateloc = UpdateLoc();
    jj_consume_token(RR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARALLEL:
      jj_consume_token(PARALLEL);
      update2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LR);
      updateloc2 = UpdateLoc();
      jj_consume_token(RR);
        updateArray.add(am.agentIndex(update2.image));
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    int agentIndex = am.agentIndex(agent.getName());
    if (symbol.image == "|>") {
    MovementUpdate newMove = new MovementUpdate(agentIndex);
    newNoInf.setUpdateActive(newMove);
    allActionInfo.put(name.image, newNoInf);}
    else if (symbol.image == ">>"){
    updateArray.add(am.agentIndex(update.image));
    updateArray.add(am.agentIndex(update.image));
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    newNoInf.setUpdateActive(newDet);
    allActionInfo.put(name.image, newNoInf);}
    else if (symbol.image == "<<"){
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    newNoInf.setUpdateActive(newDet);
    allActionInfo.put(name.image, newNoInf);}
    else if (symbol.image == ".") {
    updateArray.add(am.agentIndex(update.image));
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    newNoInf.setUpdateActive(newDet);
    allActionInfo.put(name.image, newNoInf);
    }
  }

  final public Token MelaSymbol() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token symbol = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case TRIANGLE:
    case UP:
    case DOWN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        symbol = jj_consume_token(DOT);
        break;
      case UP:
        symbol = jj_consume_token(UP);
        break;
      case DOWN:
        symbol = jj_consume_token(DOWN);
        break;
      case TRIANGLE:
        symbol = jj_consume_token(TRIANGLE);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
      {if (true) return symbol;}
    throw new Error("Missing return statement in function");
  }

  final public Token UpdateLoc() throws ParseException, NumberFormatException, RuntimeException, ParseException {
 Token update=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_LOC:
    case KEYWORD_MOVE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_LOC:
        update = jj_consume_token(KEYWORD_LOC);
        break;
      case KEYWORD_MOVE:
        update = jj_consume_token(KEYWORD_MOVE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return update;}
    throw new Error("Missing return statement in function");
  }

  final public void StoreInfAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
ArrayList<Integer > updateArray = new ArrayList<Integer >();
Token rangeNeigh=null, name = null, rateNameToken = null, symbol=null, update=null, updateloc=null, update2=null, updateloc2=null;
String infset;
int rangeNeighValue = 0;
    jj_consume_token(DASH);
    jj_consume_token(RANG);
    jj_consume_token(LBRAC);
    infset = InfSet(allActionInfo);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      rangeNeigh = jj_consume_token(INT);
      jj_consume_token(RR);
     rangeNeighValue = Integer.parseInt(rangeNeigh.image);
     infset = "neigh";
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RBRAC);
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
     String nameAction = name.image;
    if (!allActionInfo.containsKey(nameAction)) {
    AllActionInfo newInf = new AllActionInfo();
    allActionInfo.put(nameAction, newInf);
    }
    allActionInfo.get(nameAction).setAgentPerformingActive(agent.getName());
    if (infset=="local") {
    allActionInfo.get(nameAction).setInfSetLocal();
    }else if (infset=="neigh") {
    allActionInfo.get(nameAction).setInfSetNeigh(rangeNeighValue);
    } else if(infset == "all") {
    allActionInfo.get(nameAction).setInfSetAll();
    }
    jj_consume_token(COMMA);
    rateNameToken = jj_consume_token(IDENTIFIER);
     String rateName = rateNameToken.image;
     allActionInfo.get(nameAction).setType("inf");
     allActionInfo.get(nameAction).setRateName(rateName);
    jj_consume_token(RR);
    symbol = MelaSymbol();
    update = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    updateloc = UpdateLoc();
    jj_consume_token(RR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARALLEL:
      jj_consume_token(PARALLEL);
      update2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LR);
      updateloc2 = UpdateLoc();
      jj_consume_token(RR);
        updateArray.add(am.agentIndex(update2.image));
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    int agentIndex = am.agentIndex(agent.getName());
    if (symbol.image == "|>") {
    MovementUpdate newMove = new MovementUpdate(agentIndex);
    allActionInfo.get(nameAction).setUpdateActive(newMove);}
    else if (symbol.image == ">>"){
    updateArray.add(am.agentIndex(update.image));
    updateArray.add(am.agentIndex(update.image));
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    allActionInfo.get(nameAction).setUpdateActive(newDet);}
    else if (symbol.image == "<<"){
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    allActionInfo.get(nameAction).setUpdateActive(newDet);}
    else if (symbol.image == ".") {
    updateArray.add(am.agentIndex(update.image));
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    allActionInfo.get(nameAction).setUpdateActive(newDet);}
  }

  final public String InfSet(HashMap<String, AllActionInfo> allActionInfo) throws ParseException, NumberFormatException, RuntimeException, ParseException {
  Token toRead = null;
   String set = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_LOC:
    case KEYWORD_NEIGH:
    case KEYWORD_ALL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_LOC:
        toRead = jj_consume_token(KEYWORD_LOC);
         set = "local";
        break;
      case KEYWORD_NEIGH:
        toRead = jj_consume_token(KEYWORD_NEIGH);
        break;
      case KEYWORD_ALL:
        toRead = jj_consume_token(KEYWORD_ALL);
         set = "all";
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
      {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public void StorePassAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
ArrayList<Integer > updateArray = new ArrayList<Integer >();
Token name = null, probNameToken = null, symbolPass=null, updatePass=null, updatelocPass=null, updatePass2=null, updatelocPass2=null;
    jj_consume_token(LANG);
    jj_consume_token(DASH);
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
     String nameAction = name.image;
     if (!allActionInfo.containsKey(nameAction)) {
     AllActionInfo newInf = new AllActionInfo();
     allActionInfo.put(nameAction, newInf);
    }
     allActionInfo.get(nameAction).setAgentPerformingPassive(agent.getName());
    jj_consume_token(COMMA);
    probNameToken = jj_consume_token(IDENTIFIER);
     String probName = probNameToken.image;
    allActionInfo.get(nameAction).setProbName(probName);
    jj_consume_token(RR);
    symbolPass = MelaSymbol();
    updatePass = jj_consume_token(IDENTIFIER);
    jj_consume_token(LR);
    updatelocPass = UpdateLoc();
    jj_consume_token(RR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARALLEL:
      jj_consume_token(PARALLEL);
      updatePass2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LR);
      updatelocPass2 = UpdateLoc();
      jj_consume_token(RR);
        updateArray.add(am.agentIndex(updatePass2.image));
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    int agentIndex = am.agentIndex(agent.getName());
    if (symbolPass.image == "|>") {
    MovementUpdate newMove = new MovementUpdate(agentIndex);
    allActionInfo.get(nameAction).setUpdatePassive(newMove);}
    else if (symbolPass.image == ">>"){
    updateArray.add(am.agentIndex(updatePass.image));
    updateArray.add(am.agentIndex(updatePass.image));
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    allActionInfo.get(nameAction).setUpdatePassive(newDet);}
    else if (symbolPass.image == "<<"){
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    allActionInfo.get(nameAction).setUpdatePassive(newDet);}
    else if (symbolPass.image == ".") {
    updateArray.add(am.agentIndex(updatePass.image));
    DeterministicUpdate newDet = new DeterministicUpdate(agentIndex, updateArray);
    allActionInfo.get(nameAction).setUpdatePassive(newDet);}
  }

  final public void EnvAgent(HashMap<String,AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
    Token t;
    Agent agent;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(DEFINE);
     agent = am.addAgent(t.image);
    StoreEnvAction(agent, allActionInfo, am, lm);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(PLUS);
      StoreEnvAction(agent, allActionInfo, am, lm);
    }
    jj_consume_token(EOL);
  }

  final public void StoreEnvAction(Agent agent, HashMap<String, AllActionInfo> allActionInfo, AgentManager am, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
ArrayList<Integer > updateArray = new ArrayList<Integer >();
Token rangeNeigh=null, name = null, rateNameToken = null, symbol=null, update=null, updateloc=null, update2=null, updateloc2=null;
Predicate<Integer> envset;
    jj_consume_token(DASH);
    jj_consume_token(RANG);
    jj_consume_token(LBRAC);
    envset = envSet(allActionInfo, lm);
    jj_consume_token(RBRAC);
    jj_consume_token(LR);
    name = jj_consume_token(IDENTIFIER);
     String nameAction = name.image;
     if (!allActionInfo.containsKey(nameAction)) {
     AllActionInfo newEnv = new AllActionInfo();
     allActionInfo.put(nameAction, newEnv);
    }
     allActionInfo.get(nameAction).setAgentPerformingActive(agent.getName());
     allActionInfo.get(nameAction).setEnvPredicate(envset);
    jj_consume_token(COMMA);
    rateNameToken = jj_consume_token(IDENTIFIER);
     String rateName = rateNameToken.image;
     allActionInfo.get(nameAction).setType("env");
     allActionInfo.get(nameAction).setRateName(rateName);
    jj_consume_token(RR);
    symbol = MelaSymbol();
    update = jj_consume_token(IDENTIFIER);
  }

  final public Predicate<Integer> envSet(HashMap<String, AllActionInfo> allActionInfo, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
  Token toRead = null;
  String set = "";
  Predicate<Integer> envPred  = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD_ALL:
    case LR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEYWORD_ALL:
        toRead = jj_consume_token(KEYWORD_ALL);
         envPred = EnvironmentRule.allPredicate();
        break;
      case LR:
        toRead = jj_consume_token(LR);
         envPred = loc(allActionInfo, lm);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
      {if (true) return envPred;}
    throw new Error("Missing return statement in function");
  }

  final public Predicate<Integer> loc(HashMap<String, AllActionInfo> allActionInfo, LocationManager lm) throws ParseException, NumberFormatException, RuntimeException, ParseException {
  Predicate<Integer> envPred  = null;
  ArrayList<Integer> listIndex = new ArrayList<Integer>();
  String locationName;
  String locationName2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RR:
    case INT:
      //necessary (), not ideal for graph and OneD - solve it!
              locationName = locName();
         int ind = lm.getIndexFromName(locationName);
        listIndex.add(ind);
      jj_consume_token(RR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(LR);
        locationName2 = locName();
           int ind2 = lm.getIndexFromName(locationName2);
          listIndex.add(ind2);
        jj_consume_token(RR);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
      envPred = EnvironmentRule.createPredicate(listIndex);
      {if (true) return envPred;}
    throw new Error("Missing return statement in function");
  }

  final public String locName() throws ParseException, NumberFormatException, RuntimeException, ParseException {
  Token x, y, z = null;
  String locationName = "[";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      x = jj_consume_token(INT);
      locationName += x;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        y = jj_consume_token(INT);
        locationName += ", "+y;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          z = jj_consume_token(INT);
           locationName += ", "+z;
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      locationName += "]";
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
{if (true) return locationName;}
    throw new Error("Missing return statement in function");
  }

/*********
INITIAL CONDITIONS
*********/


//BiFunction<Integer,Integer,Integer>  Init( Model m ) throws NumberFormatException, RuntimeException, ParseException :
  final public HashMap<Integer,HashMap<Integer,Integer>> Init(Model m) throws ParseException, NumberFormatException, RuntimeException, ParseException {
HashMap<Integer,HashMap<Integer,Integer>> allLocationMap = new HashMap<Integer,HashMap<Integer,Integer>>();
    InitAgent(m, allLocationMap);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_7;
      }
      jj_consume_token(PARALLEL);
      InitAgent(m, allLocationMap);
    }
  {if (true) return allLocationMap;}
    throw new Error("Missing return statement in function");
  }

  final public void InitAgent(Model m , HashMap<Integer,HashMap<Integer,Integer>> allocationMap) throws ParseException, NumberFormatException, RuntimeException, ParseException {
   int agentIndex = 0;
   int locationIndex = 0;
   String locationName = "[";
   Token t, x, y, z, n;
    t = jj_consume_token(IDENTIFIER);
        if (m.getAgentManager().agentIndex(t.image) != -1){
          agentIndex = m.getAgentManager().agentIndex(t.image);
      }else{
          {if (true) throw new Error("Agent  " +  t.image + " does not exist.");}
      };
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LR:
      jj_consume_token(LR);
      x = jj_consume_token(INT);
                locationName += x;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        y = jj_consume_token(INT);
                locationName += ", "+y;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          z = jj_consume_token(INT);
                locationName += ", "+z;
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RR);
      locationName += "]";
      if (locationName == "[]") {
         //environment agent - choose the index in the matrix: 0?
         locationIndex = 0;
      }
      if (m.getLocationManager().getLocationIndex(locationName) != -1){
          locationIndex = m.getLocationManager().getLocationIndex(locationName);
      }else{
          {if (true) throw new Error("Location  " +  locationName + " does not exist.");}
      };
      locationIndex = m.getLocationManager().getLocationIndex(locationName);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(LSQ);
    n = jj_consume_token(INT);
     int nValue = Integer.parseInt(n.image);
    jj_consume_token(RSQ);
    HashMap<Integer,Integer> internalMap = allocationMap.get( agentIndex );
        if (internalMap==null) {
                internalMap = new HashMap<Integer,Integer>();
                allocationMap.put( agentIndex , internalMap );
        }
        internalMap.put( locationIndex , nValue );
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(LR)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(KEYWORD_THREED)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(LR)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(LR)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(KEYWORD_TWOD)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(DASH)) return true;
    if (jj_scan_token(RANG)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(LR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(LANG)) return true;
    if (jj_scan_token(DASH)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(KEYWORD_ONED)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(KEYWORD_GRAPH)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(VERTICES)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MELAparserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20000,0x1e00000,0x0,0x0,0xc000000,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x90000000,0x90000000,0x0,0x0,0x70000000,0x70000000,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000000,0x2000000,0x0,0x0,0x8000,0x8000,0x0,0x0,0x100,0x2,0x110100,0x40000,0x680004,0x680004,0x0,0x0,0x100,0x40000,0x0,0x0,0x40000,0x2,0x100,0x100,0x8000,0x800200,0x8000,0x8000,0x800000,0x40000,0x8000,0x8000,0x100,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MELAparser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MELAparser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MELAparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MELAparser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MELAparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MELAparser(MELAparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MELAparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
